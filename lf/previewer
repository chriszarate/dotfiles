#!/usr/bin/env bash

FILE_PATH="${1}"
FILE_EXTENSION="${FILE_PATH##*.}"
FILE_EXTENSION_LOWER="$(printf "%s" "${FILE_EXTENSION}" | tr '[:upper:]' '[:lower:]')"
PV_WIDTH="${2}"
PV_HEIGHT="${3}"
PV_HEIGHT_IMAGE="$(( ${PV_HEIGHT} / 3 ))"
HORIZONTAL_POS="${4}"
VERTICAL_POS="${5}"

bat() {
  command bat \
    --color=always --paging=never \
    --style=plain \
    --wrap=character \
    --line-range :"${PV_HEIGHT}" \
    --terminal-width="${PV_WIDTH}" "$@"
}

image_preview_by_kitty() {
  local place="${PV_WIDTH}x${PV_HEIGHT_IMAGE}@${HORIZONTAL_POS}x${VERTICAL_POS}"
  kitty icat --clear --transfer-mode memory --stdin no --align left --place "${place}" "${1}" < /dev/null > /dev/tty
}

handle_extension() {
  case "${FILE_EXTENSION_LOWER}" in
    # Markdown
    md)
      glow -s dark --width "${PV_WIDTH}" -- "${FILE_PATH}" && exit 1;;
    # JSON
    json)
      jq --color-output . "${FILE_PATH}" && exit1 ;;
    # Dmg
    dmg)
      hdiutil imageinfo "${FILE_PATH}" | bat -l yaml && exit 1;;
    # CSV and TSV
    csv|tsv)
      mlr --icsv --opprint -C --key-color darkcyan --value-color grey70 head -n 500 "${FILE_PATH}" && exit 1;;
  esac
}

handle_mime() {
  local mimetype="${1}"
  case "${mimetype}" in
    # DOCX, ePub, FB2
    *wordprocessingml.document|*/epub+zip|*/x-fictionbook+xml)
      pandoc -s -t markdown -- "${FILE_PATH}" | glow -s dark --width "${PV_WIDTH}" && exit 1;;
    # Image
    image/*)
      if [[ $TERM == "xterm-kitty" ]]; then
        image_preview_by_kitty "${FILE_PATH}"
        for (( i = 0; i < PV_HEIGHT_IMAGE; ++i )); do
          echo
        done
      elif [[ $TERM == "tmux-256color" ]]; then
        echo -e "Image preview is NOT supported in lf running in tmux!\n"
        echo -e "Use CTRL-F to invoke fzf for image preview and file toggle.\n"
      fi
      exit 1;;
    # Text
    text/* | */xml)
      (bat --style=numbers,changes -- "${FILE_PATH}" \
      || highlight --out-format truecolor --style darkplus --force \
          --line-numbers --line-range=1-"${PV_HEIGHT}" -- "${FILE_PATH}" \
      || cat -- "${FILE_PATH}") && exit 1;;
  esac
}

handle_fallback() {
  # Use file command as the fallback. It outputs the file properties, separated by comma, in a
  # single lone line. In order to fit the width of the preview window, replace each comma with a
  # line break, but leave the commas inside square brackets unchanged.
  file --dereference --brief -- "${FILE_PATH}" | gsed -r ':a; s/(\[[^][]*),([^][]*\])/\1TTEEMMPP\2/g; ta; s/, /\n/g; s/TTEEMMPP/,/g' && exit 1
  exit 1
}

MIMETYPE="$( file --dereference --brief --mime-type -- "${FILE_PATH}" )"
handle_extension
handle_mime "${MIMETYPE}"
handle_fallback

exit 1
