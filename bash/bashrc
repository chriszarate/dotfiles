## Exports
export EDITOR=vim


## Prompt
export PS1='\w$(parse_git_status)$ '


## Functions

# Get git repository status in shorthand form. Condensed form of:
# https://github.com/magicmonty/bash-git-prompt
function parse_git_status () {

  # Symbols
  local branch_symbol="⎇ "
  local tracking_symbol="⥮"
  local conflicts_symbol="✗"
  local stashed_symbol="⚑"
  local todos_symbol="✓"
  local staged_symbol="●"
  local changed_symbol="●"
  local untracked_symbol="○"

  # Colors
  local text_color="3"       # yellow
  local ahead_color="2"      # green
  local behind_color="1"     # red
  local conflicts_color="1"  # red
  local stashed_color="6"    # cyan
  local todos_color="5"      # magenta
  local staged_color="2"     # green
  local changed_color="5"    # magenta
  local untracked_color="5"  # magenta

  # Get git repository status.
  local -a git_status=($(source "$__BASH_SOURCE_DIR/bash_git_prompt" 2>/dev/null))

  # Bail if we are not in an initialized git repository.
  if [ -z "${git_status[0]}" ] || [ "${git_status[0]}" = "_PREHASH_" ]; then
    return
  fi

  # Create local variables.
  local counter=0
  for arg in branch remote staged conflicts changed untracked stashed; do
    eval local $arg="\${git_status[$counter]}"
    let counter=counter+1
  done

  # Count any TODOs in project files.
  local todos="$(git grep -F 'TODO' | wc -l | bc)"

  # Convert colors to ANSI codes
  local open_color="\001\033[3"
  local close_color="m\002"
  for arg in text ahead behind conflicts stashed todos staged changed untracked; do
    eval ${arg}_color=\$open_color\$${arg}_color\$close_color
  done

  # Print local branch name, whether or not we are tracking a remote branch,
  # and the number of commits we are ahead/behind, if applicable.
  if [ -n "$remote" ] && [ "$remote" != "_NO_REMOTE_TRACKING_" ]; then
    local tracking=" $tracking_symbol"
    if [ "$remote" != "." ]; then
      remote=${remote//_AHEAD_/${ahead_color} ▲}
      remote=${remote//_BEHIND_/${behind_color} ▼}
      tracking="$tracking$remote"
    fi
  fi
  echo -en "$text_color $branch_symbol$branch$tracking"

  # Print flags for various properties of our current git status.
  local flags=""
  for arg in conflicts stashed todos staged changed untracked; do
    if [ "${!arg}" != "0" ]; then
      local color=${arg}_color
      local symbol=${arg}_symbol
      flags="$flags${!color} ${!symbol}${!arg}"
    fi
  done
  echo -en "$flags"

  # Reset colors.
  echo -en "\001\033[0m\002 "

}

# Open SSH sessions in new tmux window and connect to a nested tmux session.
function tmux_ssh () {
  if [ -n "$2" ]; then
    if [ "$1" = "-notmux" ]; then
      shift
    fi
    ssh "$@"
  else
    tmux new-window -n "$1" """ssh -t "$1" 'tmux attach -t $(whoami) >/dev/null 2>&1 || tmux new-session -s $(whoami) >/dev/null 2>&1 || bash -l'"""
  fi
}
alias ssh="tmux_ssh"
alias pssh="tmux_ssh -notmux"

# Change to directory of the frontmost Finder window.
function cdf () {
  cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')"
}

# Find the target of a redirecting URL.
function expandurl () {
# wget -S $1 2>&1 | grep ^Location;
  curl -sIL $1 | grep '^Location' | tail -n 1 | awk '{print $2}'
}

# Change git remote by supplying user/repo.
function gitremote () {
  if [ -d ".git" ] && [ -n "$1" ]; then
    git remote rm origin
    git remote add origin git@github.com:${1}.git
    git config master.remote origin
    git config master.merge refs/heads/master
    echo "Updated git remote to git@github.com:${1}.git"
  else
    echo "Not a git repository."
  fi
}

# Get actual path to this directory for non-symlinked resources.
# http://stackoverflow.com/questions/59895
function get_bash_source_dir () {
  local SOURCE="${BASH_SOURCE[0]}"
  while [ -h "$SOURCE" ]; do
    local DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  echo "$( cd -P "$( dirname "$SOURCE" )" && pwd )"
}


## Variables

__BASH_SOURCE_DIR="$(get_bash_source_dir)"
