## Exports
export EDITOR=vim


## Prompt
export PS1='\[\e[1;32m\]\w\[\033[0m\]$(parse_git_status)$ '


## Functions

# Get git repository status in shorthand form (branch name and cleanliness).
function parse_git_status {
  git status -b --porcelain 2>/dev/null | awk -F'[#\./ ]+' '{print $2}' |
  while read statusline; do
    if [[ -n "$git_has_branch" && -n "$statusline" ]]; then
      printf "*"
      break
    fi
    printf \|$statusline && git_has_branch="yes"
  done
}

# Open SSH sessions in new tmux window and connect to a nested tmux session.
function tmux_ssh () {
  if [ -n "$2" ]; then
    ssh "$@"
  else
    tmux new-window -n "$1" """ssh -t "$1" '(command -v tmux >/dev/null 2>&1 && (tmux attach || tmux new-session -s ssh)) || bash -l'"""
  fi
}
alias ssh="tmux_ssh"

# Change to directory of the frontmost Finder window.
function cdf () {
  cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')"
}

# Find the target of a redirecting URL.
function expandurl () {
# wget -S $1 2>&1 | grep ^Location;
  curl -sIL $1 | grep '^Location' | tail -n 1 | awk '{print $2}'
}

# Change git remote by supplying user/repo.
function gitremote () {
  if [ -d ".git" ] && [ -n "$1" ]; then
    git remote rm origin
    git remote add origin git@github.com:${1}.git
    git config master.remote origin
    git config master.merge refs/heads/master
    echo "Updated git remote to git@github.com:${1}.git"
  else
    echo "Not a git repository."
  fi
}
