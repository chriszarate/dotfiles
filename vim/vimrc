" +===============+
" |  Environment  |
" +===============+

scriptencoding utf-8
set autoindent
set autoread
set background=dark
set backspace=indent,eol,start
set colorcolumn=81
set complete-=i
set directory=/tmp
set display+=lastline
set encoding=utf-8
set fileencoding=utf-8
set foldmethod=syntax
set formatoptions+=j " Delete comment character when joining commented lines
set hidden
set history=1000
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set lazyredraw
set list
set listchars=tab:┄\ ,trail:·
set mouse=a
set nobackup
set nofoldenable
set noswapfile
set nowritebackup
set nrformats-=octal
set number
set pastetoggle=<leader>P
set relativenumber
set ruler
set scrolloff=1
set shell=/usr/bin/env\ bash " cuz we fish
set shiftwidth=2
set shortmess+=c
set showcmd
set sidescrolloff=5
set signcolumn=yes
set smartcase
set smartindent
set smarttab
set splitbelow
set splitright
set synmaxcol=500
set tabstop=2
set termguicolors
set ttimeout
set ttimeoutlen=100
set ttyfast
set updatetime=300
set wildignore+=build,dist,node_modules,vendor
set wildmenu


" +===========+
" |  Plugins  |
" +===========+

call plug#begin()

" autoclose html and jsx
Plug 'alvan/vim-closetag'
let g:closetag_filenames='*.html,*.jsx,*.xml'
let g:closetag_xhtml_filenames='*.jsx,*.xml'

" set working directory to git project root
Plug 'airblade/vim-rooter'

" end whitespace wars
Plug 'editorconfig/editorconfig-vim'

" lightweight statusline
Plug 'itchyny/lightline.vim'
Plug 'maximbaz/lightline-ale' " lint status
let g:lightline={
	\ 'active': {
	\   'left': [ [ 'mode', 'paste' ],
	\             [ 'gitbranch' ],
	\             [ 'relativepath', 'modified' ] ],
	\   'right': [ [ 'lineinfo' ],
	\              [ 'linter_warnings', 'linter_errors', 'linter_ok' ],
	\              [ 'filetype' ] ]
	\ },
	\ 'colorscheme': 'gruvbox',
	\ 'component_expand': {
	\   'linter_warnings': 'lightline#ale#warnings',
	\   'linter_errors': 'lightline#ale#errors',
	\   'linter_ok': 'lightline#ale#ok'
	\ },
	\ 'component_function': {
	\   'gitbranch': 'fugitive#head'
	\ },
	\ 'component_type': {
	\   'linter_errors': 'error',
	\   'linter_warnings': 'warning'
	\ },
	\ }
let g:lightline#ale#indicator_errors='x'
let g:lightline#ale#indicator_warnings='~'

" run tests from vim
Plug 'janko/vim-test'
let g:test#strategy='vimterminal'

" fuzzy finder
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
let $FZF_DEFAULT_COMMAND='ag -g ""'
let $FZF_DEFAULT_OPTS="--exact"
nnoremap <leader>b :Buffers<cr>
nnoremap <leader>c :Commands<cr>
nnoremap <leader>h :History<cr>
nnoremap <leader>p :Files<cr>
nnoremap <leader>/ :call fzf#vim#ag('', {'options': '--delimiter : --nth 4..'})<cr>
nnoremap <leader>? :call fzf#vim#ag('', {'options': '-q ' . shellescape(expand('<cword>')) . ' --delimiter : --nth 4..'})<cr>

" sidebar to preview register contents
Plug 'junegunn/vim-peekaboo'

" sidebar to show lsp symbols
Plug 'liuchengxu/vista.vim'
let g:vista_default_executive='coc'
nnoremap <leader>r :Vista!!<cr>

" sidebar to show undo history
Plug 'mbbill/undotree'
nnoremap <leader>u :UndotreeToggle<cr>:UndotreeFocus<cr>

" smart buffer closing with save prompt
Plug 'mhinz/vim-sayonara'
nnoremap <silent> <leader>q :Sayonara!<cr>
let g:sayonara_confirm_quit=1

" git gutter
Plug 'mhinz/vim-signify'
let g:signify_vcs_list=['git']

" colorscheme
Plug 'morhetz/gruvbox'
let g:gruvbox_contrast_dark="hard"
let g:gruvbox_sign_column="bg0"

" live that good vscode life
Plug 'neoclide/coc.nvim', {'branch': 'release'}
let g:coc_global_extensions=[
\ 'coc-emoji',
\ 'coc-json',
\ 'coc-pairs',
\ 'coc-phpls',
\ 'coc-tsserver',
\ 'coc-yaml',
\ 'coc-yank',
\ ]
let g:coc_user_config={
\ 'diagnostic.enable': v:false,
\ 'suggest.echodocSupport': v:true,
\ 'suggest.enablePreview': v:true,
\ 'suggest.noselect': v:false
\ }
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gr <Plug>(coc-references)
nnoremap <silent> <leader>t :CocList symbols<cr>
nnoremap <silent> <leader>y  :<C-u>CocList -A --normal yank<cr>
inoremap <silent><expr> <cr>
\ pumvisible() ? coc#_select_confirm() : "\<C-g>u\<cr>\<c-r>=coc#on_enter()\<cr>"

" better search highlighting
Plug 'romainl/vim-cool'

" meta-package for syntax highlighting
Plug 'sheerun/vim-polyglot'

" snippets
Plug 'SirVer/ultisnips'
let g:UltiSnipsExpandTrigger='<c-s>'
let g:UltiSnipsListSnippets='<c-l>'

" comment / uncomment
Plug 'tpope/vim-commentary'

" git
Plug 'tpope/vim-fugitive'
nnoremap <leader>g :Gstatus<cr>
nnoremap <leader>d :Gvdiff<cr>

" repeat more actions with .
Plug 'tpope/vim-repeat'

" more previous / next commands with []
Plug 'tpope/vim-unimpaired'

" make peace with netrw
Plug 'tpope/vim-vinegar'
let g:netrw_altfile=1
let g:netrw_fastbrowse=0

" highlight hints on cursor jump
Plug 'unblevable/quick-scope'
let g:qs_highlight_on_keys=['f', 'F', 't', 'T']

" linting
Plug 'w0rp/ale'
let g:ale_linters={
	\   'css':        ['stylelint'],
	\   'dockerfile': ['hadolint'],
	\   'javascript': ['eslint'],
	\   'php':        ['phpcs'],
	\   'sh':         ['shellcheck'],
	\ }
let g:ale_php_phpcs_standard='WordPress'
let g:ale_sign_column_always=1
let g:ale_sign_error='x'
let g:ale_sign_warning='~'

call plug#end()


" +=========+
" |  Theme  |
" +=========+

if &t_Co >= 256
	colorscheme gruvbox
end

if &term =~# '^screen'
	let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
	let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif


" +==========+
" |  Remaps  |
" +==========+

" Buffers
nnoremap <leader><tab> :b#<cr>
nnoremap <leader>s :w<cr>
nnoremap <leader>X :%bd<bar>e#<cr>
nnoremap <leader>z :u<cr>
nnoremap <leader>Z :redo<cr>

" Harder
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
vnoremap <up> <nop>
vnoremap <down> <nop>

" Leader
nmap <space> <leader>

" Jumps
nnoremap <tab> <c-o>
nnoremap <s-tab> <c-i>
nnoremap _ <c-^>

" Navigation
inoremap jj <esc>

" Windows
map <space><space> <c-w>
