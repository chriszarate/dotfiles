" +=======================+
" |  Extend Vim defaults  |
" +=======================+

" https://github.com/vim/vim/blob/master/runtime/defaults.vim
source $VIMRUNTIME/defaults.vim


" +====================+
" |  General settings  |
" +====================+

set autoread           " reload file if it changed outside vim
set background=dark    " dark
set colorcolumn=81     " column to show max line length
set directory=/tmp     " put swap files in tmp
set encoding=utf-8     " default encoding
set fcs=vert:│         " unbroken line between vertical splits
set foldmethod=syntax  " use syntax highlighting to inform folds
set hidden             " keep buffers loaded
set lazyredraw         " don't redraw screen during macros and untyped commands
set list               " with listchars, show invisibles
set listchars=tab:⎯\ ,trail:•
set nofoldenable       " open all folds by default
set number             " line numbers
set relativenumber     " line numbers relative to the current line
set shell=/bin/bash    " most plugins expect bash
set signcolumn=yes     " always show the sign column
set synmaxcol=500      " don't bother syntax highlighting after a point

" use true colors in kitty
if &term =~ 'kitty'
	set termguicolors
endif

" assume 256 colors in screen/tmux
if &term == "screen"
	set t_Co=256
endif


" +==============+
" |  Completion  |
" +==============+

set belloff+=ctrlg
set shortmess+=c   " Shut off completion messages
set updatetime=300 " Shorter updatetime


" +=============+
" |  Indention  |
" +=============+

" A fairly inscrutable combination that seems to work.
set autoindent
set shiftwidth=2
set smartindent
set smarttab
set tabstop=2


" +=============+
" |  Searching  |
" +=============+

set hlsearch    " highlight search matches
set ignorecase  " ignore case (but see 'smartcase')
set smartcase   " respect case when it includes uppercase letters


" +===========+
" |  Plugins  |
" +===========+

call plug#begin()

" end whitespace wars
Plug 'editorconfig/editorconfig-vim'

" colorscheme
Plug 'gruvbox-community/gruvbox'
let g:gruvbox_contrast_dark="hard"
let g:gruvbox_sign_column="bg0"

" fuzzy find
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
let $FZF_DEFAULT_COMMAND='fd --type f --hidden'
let g:fzf_layout = {'window': 'enew'}
nnoremap <silent> <leader>b :Buffers<cr>
nnoremap <silent> <leader>c :Commands<cr>
nnoremap <silent> <leader>h :History<cr>
nnoremap <silent> <leader>p :Files<cr>
nnoremap <silent> <leader>f :GFiles?<cr>
nnoremap <silent> <leader>/ :Rg<cr>
nnoremap <silent> <leader>? :Rg --glob='!*.test.*'<cr>
" prevent Rg matches in filenames
command! -bang -nargs=* Rg call fzf#vim#grep("rg --hidden --color=always --column --line-number --no-heading --smart-case ".<q-args>." ''", 1, {'options': '--delimiter : --nth 4.. --preview "bat --color always --highlight-line {2..2} --style numbers {1..1}" --bind "ctrl-/:toggle-preview"'}, <bang>0)

" sidebar to preview register contents
Plug 'junegunn/vim-peekaboo'

" javascript in vim what could go wrong
Plug 'neoclide/coc.nvim', { 'branch': 'release' }
let g:coc_global_extensions=[
	\ 'coc-css',
	\ 'coc-diagnostic',
	\ 'coc-docker',
	\ 'coc-eslint',
	\ 'coc-git',
	\ 'coc-go',
	\ 'coc-html',
	\ '@yaegassy/coc-intelephense',
	\ 'coc-json',
	\ 'coc-lua',
	\ 'coc-sh',
	\ 'coc-sql',
	\ 'coc-stylelint',
	\ 'coc-tsserver',
	\ 'coc-yaml'
	\ ]
inoremap <silent><expr> <tab>
	\ pumvisible() ? '<c-n>' :
	\ <sid>check_back_space() ? '<tab>' :
	\ coc#refresh()
inoremap <expr><s-tab> pumvisible() ? '<c-p>' : '<c-h>'
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gn <Plug>(coc-rename)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> gs <Plug>(coc-git-chunkinfo)
nmap <silent> gy <Plug>(coc-type-definition)
nnoremap <silent> gk :call <sid>show_documentation()<cr>

" comment / uncomment
Plug 'tpope/vim-commentary'

" git
Plug 'tpope/vim-fugitive'
nnoremap <leader>d :Gvdiff<cr>
autocmd VimEnter * :silent! Gcd " set working directory to git root

" repeat more actions with .
Plug 'tpope/vim-repeat'

" more previous / next commands with []
Plug 'tpope/vim-unimpaired'

call plug#end()


" +=============+
" |  Functions  |
" +=============+

function! s:check_back_space() abort
	let col = col('.') - 1
	return !col || getline('.')[col - 1]  =~# '\s'
endfunction

function! s:show_documentation()
	if (index(['vim','help'], &filetype) >= 0)
		execute 'h '.expand('<cword>')
	else
		call CocActionAsync('doHover')
	endif
endfunction


" +==============+
" |  Statusline  |
" +==============+

set laststatus=2 " always show status line


" +=========+
" |  Theme  |
" +=========+

colorscheme gruvbox
highlight ColorColumn guibg=gray15
highlight SpecialKey guifg=gray20


" +========+
" |  Maps  |
" +========+

" Buffers
nnoremap <silent> , <c-^>
nnoremap <leader>w :up<cr>
nnoremap <leader>x :bdelete<cr>

" Leader
nmap <silent> <space> <leader>

" Search
nnoremap <silent> <cr> :noh<cr><cr>

" Windows
map <space><space> <c-w>
