" +=======================+
" |  Extend Vim defaults  |
" +=======================+

" https://github.com/vim/vim/blob/master/runtime/defaults.vim
source $VIMRUNTIME/defaults.vim


" +====================+
" |  General settings  |
" +====================+

set autoread           " reload file if it changed outside vim
set background=dark    " dark
set backupdir=/tmp    " put backup files in /tmp
set colorcolumn=81     " column to show max line length
set cursorline         " highlight current line
set directory=/tmp     " put swap files in tmp
set encoding=utf-8     " default encoding
set fcs=vert:│         " unbroken line between vertical splits
set foldmethod=syntax  " use syntax highlighting to inform folds
set hidden             " keep buffers loaded
set list               " with listchars, show invisibles
set listchars=tab:│\ ,trail:#
set nofoldenable       " open all folds by default
set number             " line numbers
set relativenumber     " line numbers relative to the current line
set shell=/bin/bash    " most plugins expect bash
set signcolumn=yes     " always show the sign column
set synmaxcol=500      " don't bother syntax highlighting after a point

" use true colors in kitty
if &term =~ 'kitty'
	set termguicolors
	" daddies are fighting
	let &t_Cs = "\e[4:3m"
	let &t_Ce = "\e[4:0m"
endif

" assume 256 colors in screen/tmux
if &term == "screen"
	set t_Co=256
endif


" +==============+
" |  Completion  |
" +==============+

set belloff+=ctrlg
set shortmess+=c   " Shut off completion messages
set updatetime=300 " Shorter updatetime


" +=============+
" |  Indention  |
" +=============+

" A fairly inscrutable combination that seems to work.
set autoindent
set shiftwidth=2
set smartindent
set smarttab
set tabstop=2


" +=============+
" |  Searching  |
" +=============+

set hlsearch    " highlight search matches
set ignorecase  " ignore case (but see 'smartcase')
set smartcase   " respect case when it includes uppercase letters


" +===========+
" |  Plugins  |
" +===========+

call plug#begin()

" ai aka really fast copy / paste
Plug 'github/copilot.vim'
inoremap <silent> <c-[> <plug>(copilot-previous)
inoremap <silent> <c-]> <plug>(copilot-next)

" end whitespace wars
Plug 'editorconfig/editorconfig-vim'

" ranger
Plug 'francoiscabrol/ranger.vim'
let g:ranger_map_keys=0
let g:ranger_replace_netrw=1
nnoremap <silent> _ :RangerCurrentDirectory<cr>
nnoremap <silent> - :RangerWorkingDirectory<cr>

" colorscheme
Plug 'morhetz/gruvbox'
let g:gruvbox_contrast_dark="hard"
let g:gruvbox_sign_column="bg0"

" fuzzy find
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
let $BAT_STYLE="changes,header,numbers"
nnoremap <silent> <leader>b :Buffers!<cr>
nnoremap <silent> <leader>c :Commands!<cr>
nnoremap <silent> <leader>h :History!<cr>
nnoremap <silent> <leader>m :Marks!<cr>
nnoremap <silent> <leader>p :Files!<cr>
nnoremap <silent> <leader>f :GFiles!?<cr>
nnoremap <silent> <leader>/ :RG!<cr>
nnoremap <silent> <leader># :Rg! <c-r><c-w><cr>

" sidebar to preview register contents
Plug 'junegunn/vim-peekaboo'

" javascript in vim what could go wrong
Plug 'neoclide/coc.nvim', { 'branch': 'release' }
let g:coc_global_extensions=[
	\ '@yaegassy/coc-astro',
	\ 'coc-css',
	\ 'coc-deno',
	\ 'coc-diagnostic',
	\ 'coc-docker',
	\ 'coc-eslint',
	\ 'coc-git',
	\ 'coc-go',
	\ 'coc-html',
	\ '@yaegassy/coc-intelephense',
	\ 'coc-json',
	\ 'coc-lua',
	\ 'coc-prettier',
	\ 'coc-pyright',
	\ 'coc-sh',
	\ 'coc-sql',
	\ 'coc-tsdetect',
	\ 'coc-tsserver',
	\ 'coc-yaml'
	\ ]
command! -nargs=0 Prettier :CocCommand prettier.forceFormatDocument
inoremap <silent><expr> <tab>
	\ coc#pum#visible() ? coc#pum#next(1):
	\ <sid>check_back_space() ? "\<tab>" :
	\ coc#refresh()
inoremap <expr><s-tab> coc#pum#visible() ? coc#pum#prev(1) : "\<c-h>"
inoremap <silent><expr> <cr> coc#pum#visible() ? coc#pum#confirm() : "\<c-g>u\<cr>\<c-r>=coc#on_enter()\<cr>"
nmap <silent> ,a <plug>(coc-codeaction-cursor)
nmap <silent> ,b <plug>(coc-codeaction-source)
nmap <silent> ,c :CocList commands<cr>
nmap <silent> ,d <plug>(coc-definition)
nmap <silent> ,f <plug>(coc-fix-current)
nmap <silent> ,i <plug>(coc-implementation)
nmap <silent> ,k :call <sid>show_documentation()<cr>
nmap <silent> ,l :CocList<cr>
nmap <silent> ,n <plug>(coc-rename)
nmap <silent> ,p <plug>(coc-format-selected)
vmap <silent> ,p <plug>(coc-format-selected)
nmap <silent> ,r <plug>(coc-references)
nmap <silent> ,t <plug>(coc-type-definition)
nmap <silent> ,x :CocList diagnostics<cr>
nmap <silent> ,y :call CocAction('diagnosticInfo')<cr>
nmap <silent> [x <plug>(coc-diagnostic-prev)
nmap <silent> ]x <plug>(coc-diagnostic-next)

nmap <silent> ;b :CocCommand git.showBlameDoc<cr>
nmap <silent> ;c :CocCommand git.showCommit<cr>
nmap <silent> ;g <plug>(coc-git-chunkinfo)
nmap <silent> ;o :CocCommand git.openBrowser<cr>
nmap <silent> ;p :CocCommand git.copyPermalink<cr>
nmap <silent> ;u :CocCommand git.chunkUndo<cr>
nmap <silent> [g <plug>(coc-git-prevchunk)
nmap <silent> ]g <plug>(coc-git-nextchunk)

" documentation
Plug 'rizzatti/dash.vim'
nmap <silent> K :Dash<cr>

" language support
Plug 'sheerun/vim-polyglot'
let g:polyglot_disabled=[ 'sensible' ]

" comment / uncomment
Plug 'tpope/vim-commentary'

" git
Plug 'tpope/vim-fugitive'
nnoremap <silent> <leader>d :Gvdiff<cr>
nnoremap <silent> <leader>s :vert Git<cr>
autocmd VimEnter * :silent! Gcd " set working directory to git root

" repeat more actions with .
Plug 'tpope/vim-repeat'

" more previous / next commands with []
Plug 'tpope/vim-unimpaired'
nnoremap [j <c-o>
nnoremap ]j <c-i>

call plug#end()


" +=============+
" |  Functions  |
" +=============+

function! s:check_back_space() abort
	let col = col('.') - 1
	return !col || getline('.')[col - 1]  =~ '\s'
endfunction

function! s:show_documentation()
	if (index([ 'vim', 'help' ], &filetype) >= 0)
		execute 'h '.expand('<cword>')
	else
		call CocActionAsync('doHover')
	endif
endfunction

function! CocSimpleStatus() abort
	let info = get(b:, 'coc_diagnostic_info', {})
	if empty(info)
		return ''
	endif

	let msgs = []
	if get(info, 'error', 0)
		call add(msgs, 'x' . info['error'])
	endif
	if get(info, 'information', 0)
		call add(msgs, '*' . info['information'])
	endif
	if get(info, 'lint', 0)
		call add(msgs, '+' . info['lint'])
	endif
	if get(info, 'warning', 0)
		call add(msgs, '!' . info['warning'])
	endif

	if empty(msgs)
		return ''
	endif

	return ' '. join(msgs, ' ') . ' '
endfunction

function! ToggleQuickFix()
	if empty(filter(getwininfo(), 'v:val.quickfix'))
		copen
	else
		cclose
	endif
endfunction


" +==============+
" |  Statusline  |
" +==============+

set laststatus=2 " always show status line

set statusline=
set statusline+=\                    " space
set statusline+=%f                   " current file relative to working directory
set statusline+=\                    " space
set statusline+=%h                   " help marker
set statusline+=%m                   " modified marker
set statusline+=%=                   " align right
set statusline+=%#IncSearch#            " change color
set statusline+=%{CocSimpleStatus()} " show indicator if errors are present
set statusline+=%#StatusLineNC#      " change color
set statusline+=\                    " space
set statusline+=%p%%                 " percentage scrolled
set statusline+=\                    " space
set statusline+=%l:%c                " line and column position
set statusline+=\                    " space


" +=========+
" |  Theme  |
" +=========+

colorscheme gruvbox
highlight ColorColumn guibg=gray15
highlight SpecialKey guifg=gray20
highlight clear CursorLine   " only highlight the line number
highlight clear CursorLineNR " no background color


" +========+
" |  Maps  |
" +========+

" Buffers
nmap <silent> ,, <c-^>
nnoremap <leader>q :call ToggleQuickFix()<cr>
nnoremap <leader>w :up<cr>
nnoremap <leader>W :noa w<cr>
nnoremap <leader>x :bdelete<cr>

" Leader
nmap <silent> <space> <leader>

" Search
nnoremap <silent> <cr> :noh<cr><cr>

" Windows
map <space><space> <c-w>
