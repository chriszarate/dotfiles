" +=======================+
" |  Extend Vim defaults  |
" +=======================+

" https://github.com/vim/vim/blob/master/runtime/defaults.vim
source $VIMRUNTIME/defaults.vim


" +====================+
" |  General settings  |
" +====================+

set autoread           " reload file if it changed outside vim
set background=dark    " dark
set colorcolumn=81     " column to show max line length
set directory=/tmp     " put swap files in tmp
set encoding=utf-8     " default encoding
set fcs=vert:│         " unbroken line between vertical splits
set foldmethod=syntax  " use syntax highlighting to inform folds
set hidden             " keep buffers loaded
set lazyredraw         " don't redraw screen during macros and untyped commands
set list               " with listchars, show invisibles
set listchars=tab:│\ ,trail:#
set nofoldenable       " open all folds by default
set noshowmode         " hide default mode indicator
set number             " line numbers
set relativenumber     " line numbers relative to the current line
set shell=/bin/bash    " most plugins expect bash
set signcolumn=yes     " always show the sign column
set synmaxcol=500      " don't bother syntax highlighting after a point

" use true colors in kitty
if &term =~ 'kitty'
	set termguicolors
endif

" assume 256 colors in screen/tmux
if &term == "screen"
	set t_Co=256
endif


" +==============+
" |  Completion  |
" +==============+

set belloff+=ctrlg
set shortmess+=c   " Shut off completion messages
set updatetime=300 " Shorter updatetime


" +=============+
" |  Indention  |
" +=============+

" A fairly inscrutable combination that seems to work.
set autoindent
set shiftwidth=2
set smartindent
set smarttab
set tabstop=2


" +=============+
" |  Searching  |
" +=============+

set hlsearch    " highlight search matches
set ignorecase  " ignore case (but see 'smartcase')
set smartcase   " respect case when it includes uppercase letters


" +===========+
" |  Plugins  |
" +===========+

call plug#begin()

" end whitespace wars
Plug 'editorconfig/editorconfig-vim'

" colorscheme
Plug 'gruvbox-community/gruvbox'
let g:gruvbox_contrast_dark="hard"
let g:gruvbox_sign_column="bg0"

" fuzzy find
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
let $BAT_STYLE="changes,header,numbers"
let g:fzf_layout={ 'window': 'enew' }
nnoremap <silent> <leader>b :Buffers<cr>
nnoremap <silent> <leader>c :Commands<cr>
nnoremap <silent> <leader>h :History<cr>
nnoremap <silent> <leader>p :Files<cr>
nnoremap <silent> <leader>f :GFiles?<cr>
nnoremap <silent> <leader>/ :RG<cr>
nnoremap <silent> <leader># :RG <c-r><c-w><cr>
nnoremap <silent> <leader>? :RG --glob='!*.test.*'<cr>
command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)

" sidebar to preview register contents
Plug 'junegunn/vim-peekaboo'

" use nnn instead of netrw
Plug 'mcchrish/nnn.vim'
let g:nnn#action={ '<c-v>': 'vsplit' }
let g:nnn#layout='enew'
let g:nnn#set_default_mappings=0
nnoremap <silent> - :NnnPicker %:p:h<cr>
nnoremap <silent> _ :NnnPicker<cr>

" javascript in vim what could go wrong
Plug 'neoclide/coc.nvim', { 'branch': 'release' }
let g:coc_global_extensions=[
	\ 'coc-css',
	\ 'coc-diagnostic',
	\ 'coc-docker',
	\ 'coc-eslint',
	\ 'coc-git',
	\ 'coc-go',
	\ 'coc-html',
	\ '@yaegassy/coc-intelephense',
	\ 'coc-json',
	\ 'coc-lua',
	\ 'coc-sh',
	\ 'coc-sql',
	\ 'coc-stylelint',
	\ 'coc-tsserver',
	\ 'coc-yaml'
	\ ]
inoremap <silent><expr> <tab>
	\ pumvisible() ? '<c-n>' :
	\ <sid>check_back_space() ? '<tab>' :
	\ coc#refresh()
inoremap <expr><s-tab> pumvisible() ? '<c-p>' : '<c-h>'
nnoremap <silent> ca :CocList actions<cr>
nnoremap <silent> cc :CocList commands<cr>
nnoremap <silent> cd <plug>(coc-definition)
nnoremap <silent> cg :CocList diagnostics<cr>
nnoremap <silent> ci <plug>(coc-implementation)
nnoremap <silent> ck :call <sid>show_documentation()<cr>
nnoremap <silent> cl :CocList<cr>
nnoremap <silent> cn <plug>(coc-rename)
nnoremap <silent> cr <plug>(coc-references)
nnoremap <silent> cs <plug>(coc-git-chunkinfo)
nnoremap <silent> cy <plug>(coc-type-definition)

" language support
Plug 'sheerun/vim-polyglot'
let g:polyglot_disabled=[ 'sensible' ]

" comment / uncomment
Plug 'tpope/vim-commentary'

" git
Plug 'tpope/vim-fugitive'
nnoremap <silent> gd :Gvdiff<cr>
nnoremap <silent> gs :vert Git<cr>
autocmd VimEnter * :silent! Gcd " set working directory to git root

" repeat more actions with .
Plug 'tpope/vim-repeat'

" more previous / next commands with []
Plug 'tpope/vim-unimpaired'

call plug#end()


" +=============+
" |  Functions  |
" +=============+

function! s:check_back_space() abort
	let col = col('.') - 1
	return !col || getline('.')[col - 1]  =~# '\s'
endfunction

function! s:show_documentation()
	if (index([ 'vim', 'help' ], &filetype) >= 0)
		execute 'h '.expand('<cword>')
	else
		call CocActionAsync('doHover')
	endif
endfunction

function! CocSimpleStatus() abort
	let info = get(b:, 'coc_diagnostic_info', {})
	if empty(info)
		return ''
	endif

	let msgs = []
	if get(info, 'error', 0)
		call add(msgs, 'x' . info['error'])
	endif
	if get(info, 'information', 0)
		call add(msgs, '*' . info['information'])
	endif
	if get(info, 'lint', 0)
		call add(msgs, '+' . info['lint'])
	endif
	if get(info, 'warning', 0)
		call add(msgs, '!' . info['warning'])
	endif

	return ' ' . join(msgs, ' ') . ' '
endfunction

function! ModeIndicator() abort
	let modecolor={
		\ 'n'      : '',
		\ 'no'     : '',
		\ 'v'      : 'VisualMode',
		\ 'V'      : 'VisualMode',
		\ "\<C-V>" : 'VisualMode',
		\ 's'      : 'VisualMode',
		\ 'S'      : 'VisualMode',
		\ '^S'     : 'VisualMode',
		\ 'i'      : 'InsertMode',
		\ 'R'      : 'ReplaceMode',
		\ 'Rv'     : 'ReplaceMode',
		\ 'c'      : '',
		\ 'cv'     : '',
		\ 'ce'     : '',
		\ 'r'      : '',
		\ 'rm'     : '',
		\ 'r?'     : '',
		\ '!'      : '',
		\ 't'      : ''
		\}

	let mode=mode()
	let color=modecolor[mode]
	if empty(color)
		return '%#StatusLineNC#'
	endif

	return '%#' . color . '#'
endfunction

function! RipgrepFzf(query, fullscreen)
	let command_fmt = 'rg -- %s || true'
	let initial_command = printf(command_fmt, shellescape(a:query))
	let reload_command = printf(command_fmt, '{q}')
	let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
	call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction


" +==============+
" |  Statusline  |
" +==============+

set laststatus=2 " always show status line

set statusline=
set statusline+=\                    " space
set statusline+=%f                   " current file relative to working directory
set statusline+=\                    " space
set statusline+=%h                   " help marker
set statusline+=%m                   " modified marker
set statusline+=%=                   " align right
set statusline+=%#Search#            " change color
set statusline+=%{CocSimpleStatus()} " show indicator if errors are present
set statusline+=%{%ModeIndicator()%} " mode indicator
set statusline+=\                    " space
set statusline+=%p%%                 " percentage scrolled
set statusline+=\                    " space
set statusline+=%l:%c                " line and column position
set statusline+=\                    " space


" +=========+
" |  Theme  |
" +=========+

colorscheme gruvbox
highlight ColorColumn guibg=gray15
highlight SpecialKey guifg=gray20
highlight InsertMode guibg=#458588 guifg=#282828 ctermbg=9 ctermfg=0
highlight ReplaceMode guibg=#689d6a guifg=#282828 ctermbg=10 ctermfg=0
highlight VisualMode guibg=#b16286 guifg=#282828 ctermbg=13 ctermfg=0


" +========+
" |  Maps  |
" +========+

" Buffers
nnoremap <silent> , <c-^>
nnoremap <leader>w :up<cr>
nnoremap <leader>x :bdelete<cr>

" Leader
nmap <silent> <space> <leader>

" Search
nnoremap <silent> <cr> :noh<cr><cr>

" Windows
map <space><space> <c-w>
